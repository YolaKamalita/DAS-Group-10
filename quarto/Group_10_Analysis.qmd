---
title: "Analysis of IMDB Rating with GLM"
format: pdf
editor: visual
---

# Introduction {#sec-intro}

The research question is to examine whether the rating will be greater than 7 or not given the properties of films, such as length or duration, budget, votes, genre, and year of release.

```{r}
#| echo: true
#| warning: false

library(tidyverse)
library(gt)

# Read CSV from data dir
df <- read_csv("../data/dataset10.csv")

# Display the first 5 rows
df |> 
  slice_head(n=5) |>
  gt() |>
  cols_label(
    film_id = html("Film ID"),
    year = html("Year"),
    length = html("Length"),
    budget = html("Budget"),
    votes = html("Votes"),
    genre = html("Genre"),
    rating = html("Rating")
  )
```

Description:

-   Film ID: The unique identifier for the film
-   Year: Year of release of the film in cinemas
-   Length: Duration (in minutes)
-   Budget: Budget for the films production (in \$1000000s)
-   Votes: Number of positive votes received by viewers
-   Genre: Genre of the film
-   Rating: IMDB rating from 0-10

```{r}
#| echo: true
#| warning: false

library(skimr)
library(knitr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(stats)
library(jtools)
library(sjPlot)
library(broom)
library(huxtable)
```

# Data Wrangling

```{r}
#| echo: true
#| warning: false

# Calculate the number of NA for each column

# Checking NAs
na_sum <- colSums(is.na(df))

# Plotting number of NAs
bp <- barplot(na_sum, 
        main = "Missing Values Count", 
        ylab = "Count",                
        col = "skyblue",              
        names.arg = colnames(df), 
        ylim = c(0, max(na_sum) + 200),
        las=1) 
text(x = bp, y = na_sum + 2, 
     labels = na_sum, pos = 3, 
     col = "red")
```

```{r}
#| echo: true
#| warning: false

# Number of unique values in the categorical variables

# Convert film_id as character
df[c("film_id")] <- lapply(df[c("film_id")], as.character)

# Compute number of unique values
categorical_columns <- sapply(df, 
                              function(x) is.factor(x) || is.character(x))
unique_values <- apply(df[, categorical_columns], 
                       2, 
                       function(x) length(unique(x)))

# Convert the output to be DataFrame
columns.freq <- table(unique_values)
columns.freq <- as.data.frame(columns.freq)
colnames(columns.freq) <- c("columns", "number")

# Creating barplot
bp <- barplot(unique_values,
              main='the number of unique values',
              col='skyblue',
              names.arg=colnames(unique_values),
              ylim = c(0, max(unique_values) + 200),
              legend.text = colnames(unique_values),
              las=1)
text(x = bp,
     y = unique_values+75,
     labels = unique_values)
```

```{r}
#| echo: true
#| warning: false

# Create new columns: rating_higher_than_7
df <- df %>% 
  mutate(rating_higher_than_7 = ifelse(rating <= 7, 0, 1))

# Remove NAs
df <- na.omit(df)
```

# Exploratory Data Analysis

```{r}
#| echo: true
#| warning: false

# Creating summary statistics

# Remove non-numeric columns
IMDB <- df[, !names(df) %in% c("film_id", "genre", "rating_higher_than_7")]

# Summary statistics with adjusted skim()
my_skim <- skim_with(base = sfl(n = length), 
                     numeric = sfl(p0 = NULL, p100 = NULL,hist = NULL))
knit_print(my_skim(IMDB ))
```

```{r}
#| echo: true
#| warning: false

# Calculate the correlation coefficient between numeric variables

# Filter out non-numeric columns
numeric_df <- df[sapply(df, is.numeric)]

# Compute correlation matrix
correlation_matrix <- cor(numeric_df, use = "complete.obs")

# Creating correlation heatmap
corrplot(cor(IMDB), method = "color", 
         type = "lower", addCoef.col = 'grey')
```

```{r}
#| echo: true
#| warning: false

# Creating scatterplot between rating and explanatory variables

# Rating vs. Year
p1 <- ggplot(df, aes(x = year, y = rating, 
                     color = rating_higher_than_7)) +
  geom_point() +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(title = "Rating vs Year", x = "Year", y = "Rating")

# Rating vs. Length
p2 <- ggplot(df, aes(x = length, y = rating, 
                     color = rating_higher_than_7)) +
  geom_point() +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(title = "Rating vs Length", x = "Length", y = "Rating")

# Rating vs. Budget
p3 <- ggplot(df, aes(x = budget, y = rating, 
                     color = rating_higher_than_7)) +
  geom_point() +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(title = "Rating vs Budget", x = "Budget", y = "Rating")

# Rating vs. Votes
p4 <- ggplot(df, aes(x = votes, y = rating, 
                     color = rating_higher_than_7)) +
  geom_point() +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(title = "Rating vs Votes", x = "Votes", y = "Rating")

# Plot in Grid
grid.arrange(p1, p2, p3, p4, ncol=2)
```

```{r}
#| echo: true
#| warning: false

# Creating boxplot and barplot between rating_higher_than_7 and explanatory variables

# Rating > 7 vs. Year
p1 <- ggplot(data = df, mapping = aes(x = factor(rating_higher_than_7), y = year)) +
  geom_boxplot(fill = "steelblue") +
  labs(y = "Year", x = "Rating > 7")

# Rating > 7 vs. Length
p2 <- ggplot(data = df, mapping = aes(x = factor(rating_higher_than_7), y = length)) +
  geom_boxplot(fill = "steelblue") +
  labs(y = "Length", x = "Rating > 7")

# Rating > 7 vs. Budget
p3 <- ggplot(data = df, mapping = aes(x = factor(rating_higher_than_7), y = budget)) +
  geom_boxplot(fill = "steelblue") +
  labs(y = "Budget", x = "Rating > 7")

# Rating > 7 vs. Votes
p4 <- ggplot(data = df, mapping = aes(x = factor(rating_higher_than_7), y = votes)) +
  geom_boxplot(fill = "steelblue") +
  labs(y = "Votes", x = "Rating > 7")

# Rating > 7 vs. Genre
p6 <- ggplot(df, aes(x= genre,  y = ..prop.., group=rating_higher_than_7, fill=rating_higher_than_7)) +
  geom_bar(position="dodge", stat="count") +
  labs(y = "Proportion") +
  theme_minimal() +
  theme(legend.position = "none")

# Plot in Grid
grid.arrange(arrangeGrob(p1, p2, p3, p4, ncol=2), 
             p6, nrow=2, heights = c(2, 1))
```

```{r}
#| echo: true
#| warning: false

# Calculate proportions of rating > 7 for each genre categories
ratings_genre <- df %>%
  group_by(genre) %>%
  summarize(
    proportion_higher_than_7 = round(mean(rating_higher_than_7, na.rm = TRUE),3),
    average_rating = round(mean(rating, na.rm = TRUE),2)
    ) %>%
  ungroup() %>% # Grouping is removed so it can be sorted
  arrange(desc(average_rating))

# Create barplot
ggplot(ratings_genre, aes(x = genre)) +
  geom_bar(aes(y = proportion_higher_than_7), 
           stat = "identity", fill = "skyblue", width = 0.5) +
  geom_point(aes(y = average_rating),
            stat="identity",color="red",size=2)+
  labs(x = "Genre", y = "Proportions of Rating > 7",
       title = "Rating vs. Genre") +
  scale_y_continuous(sec.axis=sec_axis(~.,name="Average of Rating")) +
  geom_text(aes(y = proportion_higher_than_7,
                label = round(proportion_higher_than_7, 2)), 
            vjust = -0.5, color = "black", size = 3.5) +
  geom_text(aes(y = average_rating,label = average_rating), 
            vjust = -0.5, color = "black", size = 3.5)
```

# 

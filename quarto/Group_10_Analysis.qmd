---
title: "Analysis of IMDB Rating with GLM"
format: pdf
editor: visual
---

# Introduction {#sec-intro}

The research question is to examine whether the rating will be greater than 7 or not given the properties of films, such as length or duration, budget, votes, genre, and year of release.

```{r}
#| echo: true
#| warning: false

library(tidyverse)
library(gt)

# Read CSV from data dir
df <- read_csv("../data/dataset10.csv")

# Display the first 5 rows
df |> 
  slice_head(n=5) |>
  gt() |>
  cols_label(
    film_id = html("Film ID"),
    year = html("Year"),
    length = html("Length"),
    budget = html("Budget"),
    votes = html("Votes"),
    genre = html("Genre"),
    rating = html("Rating")
  )
```

Description:

-   Film ID: The unique identifier for the film
-   Year: Year of release of the film in cinemas
-   Length: Duration (in minutes)
-   Budget: Budget for the films production (in \$1000000s)
-   Votes: Number of positive votes received by viewers
-   Genre: Genre of the film
-   Rating: IMDB rating from 0-10

```{r}
#| echo: true
#| warning: false

library(skimr)
library(knitr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(stats)
library(jtools)
library(sjPlot)
library(broom)
library(huxtable)
```

# Data Wrangling

```{r}
#| echo: true
#| warning: false

# Calculate the number of NA for each column

# Checking NAs
na_sum <- colSums(is.na(df))

# Plotting number of NAs
bp <- barplot(na_sum, 
        main = "Missing Values Count", 
        ylab = "Count",                
        col = "skyblue",              
        names.arg = colnames(df), 
        ylim = c(0, max(na_sum) + 200),
        las=1) 
text(x = bp, y = na_sum + 2, 
     labels = na_sum, pos = 3, 
     col = "red")
```

```{r}
#| echo: true
#| warning: false

# Number of unique values in the categorical variables

# Convert film_id as character
df[c("film_id")] <- lapply(df[c("film_id")], as.character)

# Compute number of unique values
categorical_columns <- sapply(df, 
                              function(x) is.factor(x) || is.character(x))
unique_values <- apply(df[, categorical_columns], 
                       2, 
                       function(x) length(unique(x)))

# Convert the output to be DataFrame
columns.freq <- table(unique_values)
columns.freq <- as.data.frame(columns.freq)
colnames(columns.freq) <- c("columns", "number")

# Creating barplot
bp <- barplot(unique_values,
              main='the number of unique values',
              col='skyblue',
              names.arg=colnames(unique_values),
              ylim = c(0, max(unique_values) + 200),
              legend.text = colnames(unique_values),
              las=1)
text(x = bp,
     y = unique_values+75,
     labels = unique_values)
```

```{r}
#| echo: true
#| warning: false

# Create new columns: rating_higher_than_7
df <- df %>% 
  mutate(rating_higher_than_7 = ifelse(rating <= 7, 0, 1))

# Remove NAs
df <- na.omit(df)
```

# Exploratory Data Analysis

```{r}
#| echo: true
#| warning: false

# Creating summary statistics

# Remove non-numeric columns
IMDB <- df[, !names(df) %in% c("film_id", "genre", "rating_higher_than_7")]

# Summary statistics with adjusted skim()
my_skim <- skim_with(base = sfl(n = length), 
                     numeric = sfl(p0 = NULL, p100 = NULL,hist = NULL))
knit_print(my_skim(IMDB ))
```

```{r}

#| echo: true
#| warning: false

# Creating correlation heatmap
corrplot(cor(IMDB), method = "color", 
         type = "lower", addCoef.col = 'grey')
```

```{r}
#| echo: true
#| warning: false

# Creating scatterplot between rating and explanatory variables

# Rating vs. Year
p1 <- ggplot(df, aes(x = year, y = rating, 
                     color = rating_higher_than_7)) +
  geom_point() +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(title = "Rating vs Year", x = "Year", y = "Rating")

# Rating vs. Length
p2 <- ggplot(df, aes(x = length, y = rating, 
                     color = rating_higher_than_7)) +
  geom_point() +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(title = "Rating vs Length", x = "Length", y = "Rating")

# Rating vs. Budget
p3 <- ggplot(df, aes(x = budget, y = rating, 
                     color = rating_higher_than_7)) +
  geom_point() +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(title = "Rating vs Budget", x = "Budget", y = "Rating")

# Rating vs. Votes
p4 <- ggplot(df, aes(x = votes, y = rating, 
                     color = rating_higher_than_7)) +
  geom_point() +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(title = "Rating vs Votes", x = "Votes", y = "Rating")

# Plot in Grid
grid.arrange(p1, p2, p3, p4, ncol=2)
```

```{r}
#| echo: true
#| warning: false

# Creating boxplot and barplot between rating_higher_than_7 and explanatory variables

# Rating > 7 vs. Year
p1 <- ggplot(data = df, mapping = aes(x = factor(rating_higher_than_7), y = year)) +
  geom_boxplot(fill = "steelblue") +
  labs(y = "Year", x = "Rating > 7")

# Rating > 7 vs. Length
p2 <- ggplot(data = df, mapping = aes(x = factor(rating_higher_than_7), y = length)) +
  geom_boxplot(fill = "steelblue") +
  labs(y = "Length", x = "Rating > 7")

# Rating > 7 vs. Budget
p3 <- ggplot(data = df, mapping = aes(x = factor(rating_higher_than_7), y = budget)) +
  geom_boxplot(fill = "steelblue") +
  labs(y = "Budget", x = "Rating > 7")

# Rating > 7 vs. Votes
p4 <- ggplot(data = df, mapping = aes(x = factor(rating_higher_than_7), y = votes)) +
  geom_boxplot(fill = "steelblue") +
  labs(y = "Votes", x = "Rating > 7")

# Rating > 7 vs. Genre
p6 <- ggplot(df, aes(x= genre,  y = ..prop.., group=rating_higher_than_7, fill=rating_higher_than_7)) +
  geom_bar(position="dodge", stat="count") +
  labs(y = "Proportion") +
  theme_minimal() +
  theme(legend.position = "none")

# Plot in Grid
grid.arrange(arrangeGrob(p1, p2, p3, p4, ncol=2), 
             p6, nrow=2, heights = c(2, 1))
```

```{r}
#| echo: true
#| warning: false

# Calculate proportions of rating > 7 for each genre categories
proportions <- df %>%
  group_by(genre) %>%
  summarize(proportion_higher_than_7 = 100*round(mean(rating_higher_than_7, na.rm = TRUE),4))

# Create barplot
ggplot(proportions, aes(x = genre, y = proportion_higher_than_7)) +
  geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +
  labs(x = "Genre", y = "Proportions of Rating > 7",
       title = "Proportions of Rating > 7 Grouping by Genre") +
  geom_text(aes(label = round(proportion_higher_than_7, 2)), vjust = -0.5, color = "black", size = 3.5)
```

# Statistical Analysis (GLM)

## Model Fitting

```{r}
#| echo: true
#| warning: false

# Fitting the model
model <- glm(rating_higher_than_7 ~ length + budget + votes + genre, 
             data = df, 
             family = binomial(link = "logit"))

# Display the model summary (log-odds)
model %>%
  summary()

# Display CI for the log-odds
confint(model) %>%
  kable()
```

Based on the result, the log-odds coefficients for budget and votes are positive indicating the higher their values then the rating will be more likely to be higher than 7. Furthermore, the log-odds coefficients for length is negative, and it indicates that the lower the values, the rating to be higher than 7 is more likely. These coefficients are statistically significant because the P-values are lower than 0.05 and Confidence Intervals (CI) do not contain 0. There are some coefficients which are not statistically significant, such as genre:Animation and genre:Romance.

```{r}
#| echo: true
#| warning: false

# Plot Odds Ratios for each parameters
plot_model(model, show.values=TRUE)
```

In this analysis, the baseline for Genre is Action. For Comedy, Documentary, and Short, the odds ratios compared to the baseline, Action, has values much higher than 1. For example, Comedy's odds of having rating higher than 7 is 25.06 times those of Action films. However, the Animation's odds is 0.43 times to Action's odds, and this is not align with the fact that Animation's proportion (of having rating higher than 7) is bigger than Action. Moreover, that is not statistically significant.

```{r}
#| echo: true
#| warning: false

# Plot predicted probabilities of having rating higher than 7
plot_model(model,type="pred",terms=c("length","genre"))
plot_model(model,type="pred",terms=c("budget","genre"))
plot_model(model,type="pred",terms=c("votes","genre"))
```

Other than Romance genre, the probabilities of having rating higher than 7 decreasing by length and increasing by votes and budget. It can be seen from the log-odds and odds sign as well.

## Model Selection

```{r export_summary, results='asis'}

#| echo: true
#| warning: false
#| error: false

# Comparing models with different explanatory variables

model_2 <- glm(rating_higher_than_7 ~ year + length + budget + votes + genre, 
               data = df, 
               family = binomial(link = "logit"))
model_3 <- glm(rating_higher_than_7 ~ length + budget + genre, 
               data = df, 
               family = binomial(link = "logit"))

suppressWarnings(export_summs(model, model_2, model_3,
                error_format = "[{conf.low}, {conf.high}]"))
```

After doing some investigations, the model without year (model 1) is the one that can give the lowest AIC. Removing votes (model 3) does not make the AIC becoming lower and BIC is also only resulted in a slightly lower. Hence, model 1 is selected to be the final model.

# Conclusion

Discussion required.
